#!/bin/sh

set -u
set -e

CFLAGS=""
CFLAGS_cc=""
CFLAGS_gcc="-std=c99 -pedantic -fstrict-aliasing -Wextra -Wall -Wstrict-aliasing -Wconversion -Wno-sign-conversion"
CFLAGS_c99=""
CFLAGS_clang="-std=c99 -pedantic -fstrict-aliasing -Wextra -Wall -Wstrict-aliasing -Wconversion -Wno-sign-conversion"

SUNOS_cc="-std=c99 -pedantic -v -errwarn -mt -fast -xalias_level=std"
SUNOS_c99="-v -errwarn -mt -xalias_level=std -fast"

LNET=""

# For FreeBSD add
# Something weird with FreeBSD and math.h, M_PI is not visible unless
# _XOPEN_SOURCE is defined. (_POSIX_C_SOURCE is not needed when
# _XOPEN_SOURCE but as long as they do not conflict it is not a problem
# to define both of them).
# CFLAGS += -D_XOPEN_SOURCE=600

configure_i386()
{
    cmd=$1

    printf "Scan for SSE 4.2..."
    if ${cmd} | grep -q -i sse4; then
        printf "found\n"
        CFLAGS="${CFLAGS} -D_HAS_SSE42=1 -D_HAS_SIMD4=1"
    else
        printf "not found\n"
    fi
    printf "Scan for AVX......."
    if ${cmd} | grep -q -i avx; then
        printf "found\n"
        CFLAGS="${CFLAGS} -D_HAS_AVX=1 -D_HAS_SIMD8=1"
    else
        printf "not found\n"
    fi
    printf "Scan for AVX2......"
    if ${cmd} | grep -q -i avx2; then
        printf "found\n"
        CFLAGS="${CFLAGS} -D_HAS_AVX2=1"
    else
        printf "not found\n"
    fi
}

configure_sunos_i386()
{
    cmd="isainfo -x"

    configure_i386 "$cmd"

    if echo ${CFLAGS} | grep -q AVX2; then
        CFLAGS_c99="${CFLAGS_c99} -xarch=avx2"
        CFLAGS_cc="${CFLAGS_cc} -xarch=avx2"
        CFLAGS_gcc="${CFLAGS_gcc} -mavx2"
    elif echo ${CFLAGS} | grep -q AVX; then
        CFLAGS_c99="${CFLAGS_c99} -xarch=avx"
        CFLAGS_cc="${CFLAGS_cc} -xarch=avx"
        CFLAGS_gcc="${CFLAGS_gcc} -mavx"
    elif echo ${CFLAGS} | grep -qi SSE4; then
        CFLAGS_c99="${CFLAGS_c99} -xarch=sse4_2"
        CFLAGS_cc="${CFLAGS_cc} -xarch=sse4_2"
        CFLAGS_gcc="${CFLAGS_gcc} -msse4.2"
    fi

    CFLAGS_cc="${CFLAGS_cc} ${SUNOS_cc}"
    CFLAGS_c99="${CFLAGS_c99} ${SUNOS_c99}"
    LNET="-lnsl -lsocket"
}

configure_sunos_sparc()
{
    cmd="isainfo -x"

    printf "Scan for VIS 2.0..."
    if ${cmd} | grep -q -i vis2; then
        printf "found\n"
        CFLAGS="${CFLAGS} -D_HAS_VIS2=1"
    else
        printf "....not found\n"
    fi

    if echo ${CFLAGS} | grep -q VIS2; then
        CFLAGS_c99="${CFLAGS_c99} -xarch=sparcvis2"
        CFLAGS_cc="${CFLAGS_cc} -xarch=sparcvis2"
        CFLAGS_gcc="${CFLAGS_gcc} -mvis2"
    fi

    CFLAGS_cc="${CFLAGS_cc} ${SUNOS_cc}"
    CFLAGS_c99="${CFLAGS_c99} ${SUNOS_c99}"
    LNET="-lnsl -lsocket"
}

configure_bsd_i386()
{
    cmd="sysctl -n machdep.cpu.features"

    configure_i386 "$cmd"

    if echo ${CFLAGS} | grep -q AVX2; then
        CFLAGS_gcc="${CFLAGS_gcc} -mavx2"
    elif echo ${CFLAGS} | grep -q AVX; then
        CFLAGS_gcc="${CFLAGS_gcc} -mavx"
    elif echo ${CFLAGS} | grep -q SSE4; then
        CFLAGS_gcc="${CFLAGS_gcc} -msse4.2"
    fi
}

configure_bsd_ppc()
{
    CFLAGS_gcc="${CFLAGS_gcc} -fgcse-sm  -mpowerpc-gpopt"

    printf "Scan for Altivec/VMX..."
    if sysctl -n hw.altivec | grep -q 1; then
        printf "found\n"
        CFLAGS="${CFLAGS} -D_HAS_ALTIVEC=1 -D_HAS_SIMD4=1"
        CFLAGS_gcc="${CFLAGS_gcc} -maltivec"
    else
        printf "...not found\n"
    fi

    if sysctl -n hw.model | grep -q 970; then
        CFLAGS_gcc="${CFLAGS_gcc} -mcpu=970 -mtune=970 -mpowerpc64"
    fi
}

configure_obsd_amd64()
{
    cmd="grep cpu0 /var/run/dmesg.boot"

    configure_i386 "$cmd"

    # Byte order for GCC
    order=`sysctl hw.byteorder | cut -d= -f2`
    CFLAGS_gcc="${CFLAGS_gcc} -D__BYTE_ORDER__=${order}"

    if echo ${CFLAGS} | grep -q AVX2; then
        CFLAGS_gcc="${CFLAGS_gcc} -mavx2"
    elif echo ${CFLAGS} | grep -q AVX; then
        CFLAGS_gcc="${CFLAGS_gcc} -mavx"
    elif echo ${CFLAGS} | grep -q SSE4; then
        CFLAGS_gcc="${CFLAGS_gcc} -msse4.2"
    fi

    if echo ${CFLAGS} | grep -q AVX2; then
        CFLAGS_clang="${CFLAGS_clang} -mavx2"
    elif echo ${CFLAGS} | grep -q AVX; then
        CFLAGS_clang="${CFLAGS_clang} -mavx"
    elif echo ${CFLAGS} | grep -q SSE4; then
        CFLAGS_clang="${CFLAGS_clang} -msse4.2"
    fi
}

#
# M A I N
#
OS=`uname -s`
echo "Detected Operating system ${OS}"
ISA=`uname -p`
echo "Detected ISA              ${ISA}"

case ${OS} in
    SunOS)
        case ${ISA} in
            i386)
                configure_sunos_i386
                ;;
            sparc)
                configure_sunos_sparc
                ;;
            *)
                echo Unsupported ISA
                exit 1
                ;;
        esac
        ;;
    FreeBSD|Darwin)
        case ${ISA} in
            i386)
                configure_bsd_i386
                ;;
            powerpc64)
                configure_bsd_ppc
                ;;
            *)
                echo Unsupported ISA
                exit 1
                ;;
        esac
        ;;
    OpenBSD)
        case ${ISA} in
            amd64)
                configure_obsd_amd64
                ;;
            *)
                echo Unsupported ISA
                exit 1
                ;;
        esac
        ;;
    *)
        echo Unsupported Operating system
        exit 1
        ;;
esac

TGT=include.mk
cat << EOF > ${TGT}
# Automatically generated by configure. Do not modify.
CC      = gcc
OPT_LVL = -O3
CFLAGS  = -m64 -I/usr/local/include -DMT_SAFE -D_POSIX_C_SOURCE=200112L -D_PIE_EDIT_LINEAR=0 \$(OPT_LVL)
LFLAGS  += -lm -L/usr/local/lib
LSCUT   = -L/usr/local/lib -lscut
OS      = \$(shell uname -s)
ISA     = \$(shell uname -p)
DEBUG   = 1
LCRYPTO = -lssl -lcrypto
LIMG    = -lpng -ljpeg -lraw
LNET    =
EOF
echo "CFLAGS += ${CFLAGS}" >> ${TGT}
echo "CFLAGS_cc = ${CFLAGS_cc}" >> ${TGT}
echo "CFLAGS_c99 = ${CFLAGS_c99}" >> ${TGT}
echo "CFLAGS_gcc = ${CFLAGS_gcc}" >> ${TGT}
echo "CFLAGS_clang = ${CFLAGS_clang}" >> ${TGT}
echo 'CFLAGS += $(CFLAGS_$(CC))' >> ${TGT}
echo "LNET = ${LNET}" >> ${TGT}
